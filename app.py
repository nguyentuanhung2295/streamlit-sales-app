# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fx4h_CuAnk7KDWPFGRPJEJf9NwtuhHMy
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('store_sales.csv')
df.info()

df.isnull().sum()

df.duplicated().sum()

df = df[df['store'] == 1]
df['date'] = pd.to_datetime(df['date'])

df.set_index('date', inplace=True)
weekly_data = df.resample('W-MON').agg({
    'sales': 'sum',
    'promo': 'mean'
}).rename(columns={
    'sales': 'weekly_sales',
    'promo': 'onpromotion_ratio'
})

weekly_data['week_of_year'] = weekly_data.index.isocalendar().week
weekly_data['month'] = weekly_data.index.month
weekly_data['year'] = weekly_data.index.year

weekly_data = weekly_data.reset_index()
weekly_data.head()

df['week'] = pd.date_range(start='2022-01-01', periods=len(df), freq='W-MON')

plt.figure(figsize=(12, 6))
plt.plot(df['week'], df['sales'], color='blue', linewidth=2)
plt.title('Weekly Sales Over Time')
plt.xlabel('Week')
plt.ylabel('Sales')
plt.grid(True)
plt.tight_layout()
plt.show()

import seaborn as sns

# Set plot size and style
plt.figure(figsize=(10, 6))
sns.histplot(df['sales'], bins=30, kde=True, color='skyblue')

# Add labels and title
plt.title('Distribution of Weekly Sales', fontsize=16)
plt.xlabel('Weekly Sales', fontsize=12)
plt.ylabel('Frequency', fontsize=12)
plt.grid(True)
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 6))
sns.boxplot(x='promo', y='sales', data=df, palette='Set2')

plt.title('Weekly Sales: Promotional vs Non-Promotional Weeks', fontsize=16)
plt.xlabel('Promotion Status (0 = No Promo, 1 = Promo)', fontsize=12)
plt.ylabel('Weekly Sales', fontsize=12)
plt.grid(True)
plt.tight_layout()
plt.show()

# Compute correlation matrix
corr_matrix = df[['sales', 'promo', 'holiday']].corr()

# Plot heatmap
plt.figure(figsize=(6, 4))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Between Sales, Promotion, and Holiday')
plt.show()

# Ensure 'week' column is datetime
df['week'] = pd.to_datetime(df['week'])

# Extract month from week and compute monthly average sales
df['month'] = df['week'].dt.month
monthly_avg_sales = df.groupby('month')['sales'].mean()

# Plot bar chart
plt.figure(figsize=(8, 5))
monthly_avg_sales.plot(kind='bar', color='skyblue')
plt.title('Average Weekly Sales by Month')
plt.xlabel('Month')
plt.ylabel('Average Sales')
plt.xticks(rotation=0)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Step 1: Create a sequential week number for modeling
# This assumes that each row represents a weekly observation
df['week_num'] = range(1, len(df) + 1)

# Step 2: Import necessary libraries for model training and evaluation
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np
import matplotlib.pyplot as plt

# Step 3: Define the feature columns and the target variable
features = ['week_num', 'promo', 'holiday']
target = 'sales'

# Step 4: Prepare the feature matrix (X) and target vector (y)
X = df[features]
y = df[target]

# Step 5: Split the dataset into training and testing subsets
# Using 80% of data for training and 20% for testing to validate model performance
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Step 6: Initialize and train a Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 7: Use the trained model to make predictions on the test set
y_pred = model.predict(X_test)

# Step 8: Evaluate the model using MAE and RMSE
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

# Step 9: Print evaluation results
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")

# Step 10: Visualize the predicted vs. actual sales using a scatter plot
plt.figure(figsize=(8, 5))
plt.scatter(y_test, y_pred, color='darkorange', alpha=0.6, label='Predicted vs Actual')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()],
         color='blue', linestyle='--', label='Perfect Prediction Line')
plt.title('Actual vs. Predicted Weekly Sales')
plt.xlabel('Actual Sales')
plt.ylabel('Predicted Sales')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
